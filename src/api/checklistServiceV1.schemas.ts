/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * Checklist service v1
 * Checklist service v1
 * OpenAPI spec version: 1.0.0
 */
export type ChangeChecklistItemOrderNumber200 = {
  /** @minimum 1 */
  newOrderNumber?: number;
  /** @minimum 1 */
  oldOrderNumber?: number;
};

export type ChangeChecklistItemOrderNumberBody = {
  /** @minimum 1 */
  newOrderNumber: number;
};

export type ChangeChecklistItemOrderNumberSortOrder = typeof ChangeChecklistItemOrderNumberSortOrder[keyof typeof ChangeChecklistItemOrderNumberSortOrder];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ChangeChecklistItemOrderNumberSortOrder = {
  asc: 'asc',
  desc: 'desc',
} as const;

export type ChangeChecklistItemOrderNumberParams = {
sortOrder?: ChangeChecklistItemOrderNumberSortOrder;
};

export type ToggleChecklistItemCompleteBody = {
  /** New completion status */
  completed: boolean;
};

export type GetAllChecklistItemsSort = typeof GetAllChecklistItemsSort[keyof typeof GetAllChecklistItemsSort];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetAllChecklistItemsSort = {
  asc: 'asc',
  desc: 'desc',
} as const;

export type GetAllChecklistItemsParams = {
/**
 * Sort order
 */
sort?: GetAllChecklistItemsSort;
/**
 * Filter by completed status
 */
completed?: boolean;
};

export type Get200 = {
  status?: string;
};

export interface ChecklistItemReorderedEventPayload {
  /**
   * @minimum 1
   */
  itemId: number;
  /**
   * @minimum 1
   */
  newOrderNumber: number;
  /** Indicates if the order number was changed */
  orderChanged: boolean;
}

export interface ChecklistItemDeletedEventPayload {
  /**
   * @minimum 1
   */
  itemId: number;
}

export interface ChecklistItemRowAddedEventPayload {
  /**
   * @minimum 1
   */
  itemId: number;
  row: ChecklistItemRowResponse;
}

export interface ChecklistItemRowDeletedEventPayload {
  /**
   * @minimum 1
   */
  itemId: number;
  /**
   * @minimum 1
   */
  rowId: number;
}

/**
 * Event type identifier
 */
export type EventEnvelopeType = typeof EventEnvelopeType[keyof typeof EventEnvelopeType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EventEnvelopeType = {
  checklistItemCreated: 'checklistItemCreated',
  checklistItemUpdated: 'checklistItemUpdated',
  checklistItemDeleted: 'checklistItemDeleted',
  checklistItemRowAdded: 'checklistItemRowAdded',
  checklistItemRowUpdated: 'checklistItemRowUpdated',
  checklistItemRowDeleted: 'checklistItemRowDeleted',
  checklistItemReordered: 'checklistItemReordered',
} as const;

/**
 * Envelope for SSE events; sent as JSON in the SSE data field.
The `type` field indicates the event type, and the `payload` field contains the event data.
The expected structure of `payload` for each `type` is as follows:
  - checklistItemCreated: ChecklistItemResponse
  - checklistItemUpdated: ChecklistItemResponse
  - checklistItemDeleted: ChecklistItemDeletedEventPayload
  - checklistItemRowAdded: ChecklistItemRowResponse
  - checklistItemRowUpdated: ChecklistItemRowResponse
  - checklistItemRowDeleted: ChecklistItemRowDeletedEventPayload
  - checklistItemRowAdded: ChecklistItemRowAddedEventPayload
  - checklistItemReordered: ChecklistItemReorderedEventPayload
For event types not listed above, `payload` may be null or a free-form object.

 */
export interface EventEnvelope {
  /** Payload structure depends on event type:
  - checklistItemCreated, checklistItemUpdated: ChecklistItemResponse
  - checklistItemDeleted: ChecklistItemDeletedEventPayload
  - checklistItemRowAdded, checklistItemRowUpdated: ChecklistItemRowResponse
  - checklistItemRowDeleted: ChecklistItemRowDeletedEventPayload
  - checklistItemReordered: ChecklistItemReorderedEventPayload
 */
  payload?: EventEnvelopePayload;
  /** Event type identifier */
  type: EventEnvelopeType;
}

export interface ChecklistResponse {
  /**
   * @minimum 1
   */
  id: number;
  items?: ChecklistItemResponse[];
  /**
   * @minLength 1
   */
  name: string;
}

export interface ChecklistUpdateAndCreateRequest {
  /**
   * @minLength 1
   */
  name: string;
}

export type UpdateChecklistRequest = ChecklistUpdateAndCreateRequest;

export type CreateChecklistRequest = ChecklistUpdateAndCreateRequest;

export interface CreateOrUpdateChecklistItemRowRequest {
  /** @nullable */
  completed: boolean | null;
  /**
   * @minLength 1
   */
  name: string;
}

export type CreateChecklistItemRowRequest = CreateOrUpdateChecklistItemRowRequest;

export interface ChecklistItemRowResponse {
  /** @nullable */
  completed: boolean | null;
  /**
   * @minimum 0
   */
  id: number;
  /**
   * @minLength 1
   */
  name: string;
}

export interface ChecklistItemResponse {
  /** */
  completed: boolean;
  /**
   * @minimum 1
   */
  id: number;
  /**
   * @minLength 1
   */
  name: string;
  /**
   * @minimum 1
   */
  orderNumber: number;
  rows: ChecklistItemRowResponse[];
}

/**
 * Payload structure depends on event type:
  - checklistItemCreated, checklistItemUpdated: ChecklistItemResponse
  - checklistItemDeleted: ChecklistItemDeletedEventPayload
  - checklistItemRowAdded, checklistItemRowUpdated: ChecklistItemRowResponse
  - checklistItemRowDeleted: ChecklistItemRowDeletedEventPayload
  - checklistItemReordered: ChecklistItemReorderedEventPayload

 */
export type EventEnvelopePayload = ChecklistItemResponse | ChecklistItemRowResponse | ChecklistItemRowDeletedEventPayload | ChecklistItemRowAddedEventPayload | ChecklistItemDeletedEventPayload | ChecklistItemReorderedEventPayload;

export type UpdateChecklistItemRequestRowsItem = {
  /** @nullable */
  completed: boolean | null;
  /**
   * @minimum 1
   */
  id: number;
  /**
   * @minLength 1
   */
  name: string;
};

export interface UpdateChecklistItemRequest {
  /** */
  completed: boolean;
  /** */
  id: number;
  /**
   * @minLength 1
   */
  name: string;
  rows: UpdateChecklistItemRequestRowsItem[];
}

export interface CreateChecklistItemRequest {
  /**
   * @minLength 1
   */
  name: string;
  rows?: CreateOrUpdateChecklistItemRowRequest[];
}

export interface Error {
  /**
   * @minLength 0
   */
  message: string;
}

