/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * Checklist service v1
 * Checklist service v1
 * OpenAPI spec version: 1.0.0
 */
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import useSwr from 'swr'
import type {
  Arguments,
  Key,
  SWRConfiguration
} from 'swr'
import useSWRMutation from 'swr/mutation'
import type {
  SWRMutationConfiguration
} from 'swr/mutation'
import type {
  ChangeChecklistItemOrderNumber200,
  ChangeChecklistItemOrderNumberBody,
  ChangeChecklistItemOrderNumberParams,
  ChecklistItemResponse,
  CreateChecklistItemRequest,
  Error,
  GetAllChecklistItemsParams,
  UpdateChecklistItemRequest
} from '../checklistServiceV1.schemas'


  
  /**
 * @summary Get all checklist items by checklist ID
 */
export const getAllChecklistItems = (
    checklistId: number,
    params?: GetAllChecklistItemsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ChecklistItemResponse[]>> => {
    return axios.get(
      `/api/v1/checklists/${checklistId}/items`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getGetAllChecklistItemsKey = (checklistId: number,
    params?: GetAllChecklistItemsParams,) => [`/api/v1/checklists/${checklistId}/items`, ...(params ? [params]: [])] as const;


export type GetAllChecklistItemsQueryResult = NonNullable<Awaited<ReturnType<typeof getAllChecklistItems>>>
export type GetAllChecklistItemsQueryError = AxiosError<Error>

/**
 * @summary Get all checklist items by checklist ID
 */
export const useGetAllChecklistItems = <TError = AxiosError<Error>>(
  checklistId: number,
    params?: GetAllChecklistItemsParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getAllChecklistItems>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }
) => {
  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(checklistId)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetAllChecklistItemsKey(checklistId,params) : null);
  const swrFn = () => getAllChecklistItems(checklistId,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * @summary Create a new checklist item
 */
export const createChecklistItem = (
    checklistId: number,
    createChecklistItemRequest: CreateChecklistItemRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ChecklistItemResponse>> => {
    return axios.post(
      `/api/v1/checklists/${checklistId}/items`,
      createChecklistItemRequest,options
    );
  }



export const getCreateChecklistItemMutationFetcher = (checklistId: number, options?: AxiosRequestConfig) => {
  return (_: string, { arg }: { arg: CreateChecklistItemRequest }): Promise<AxiosResponse<ChecklistItemResponse>> => {
    return createChecklistItem(checklistId, arg, options);
  }
}
export const getCreateChecklistItemMutationKey = (checklistId: number,) => `/api/v1/checklists/${checklistId}/items` as const;

export type CreateChecklistItemMutationResult = NonNullable<Awaited<ReturnType<typeof createChecklistItem>>>
export type CreateChecklistItemMutationError = AxiosError<Error>

/**
 * @summary Create a new checklist item
 */
export const useCreateChecklistItem = <TError = AxiosError<Error>>(
  checklistId: number, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof createChecklistItem>>, TError, string, CreateChecklistItemRequest, Awaited<ReturnType<typeof createChecklistItem>>> & { swrKey?: string }, axios?: AxiosRequestConfig }
) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getCreateChecklistItemMutationKey(checklistId);
  const swrFn = getCreateChecklistItemMutationFetcher(checklistId,axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * @summary Get checklist item by checklist id and item id
 */
export const getChecklistItemBychecklistIdAndItemId = (
    checklistId: number,
    itemId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ChecklistItemResponse>> => {
    return axios.get(
      `/api/v1/checklists/${checklistId}/items/${itemId}`,options
    );
  }



export const getGetChecklistItemBychecklistIdAndItemIdKey = (checklistId: number,
    itemId: number,) => [`/api/v1/checklists/${checklistId}/items/${itemId}`] as const;


export type GetChecklistItemBychecklistIdAndItemIdQueryResult = NonNullable<Awaited<ReturnType<typeof getChecklistItemBychecklistIdAndItemId>>>
export type GetChecklistItemBychecklistIdAndItemIdQueryError = AxiosError<Error>

/**
 * @summary Get checklist item by checklist id and item id
 */
export const useGetChecklistItemBychecklistIdAndItemId = <TError = AxiosError<Error>>(
  checklistId: number,
    itemId: number, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getChecklistItemBychecklistIdAndItemId>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }
) => {
  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(checklistId && itemId)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetChecklistItemBychecklistIdAndItemIdKey(checklistId,itemId) : null);
  const swrFn = () => getChecklistItemBychecklistIdAndItemId(checklistId,itemId, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * @summary Delete checklist item by checklistId and checklistItemId
 */
export const deleteChecklistItemById = (
    checklistId: number,
    itemId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ChecklistItemResponse>> => {
    return axios.delete(
      `/api/v1/checklists/${checklistId}/items/${itemId}`,options
    );
  }



export const getDeleteChecklistItemByIdMutationFetcher = (checklistId: number,
    itemId: number, options?: AxiosRequestConfig) => {
  return (_: string, __: { arg: Arguments }): Promise<AxiosResponse<ChecklistItemResponse>> => {
    return deleteChecklistItemById(checklistId, itemId, options);
  }
}
export const getDeleteChecklistItemByIdMutationKey = (checklistId: number,
    itemId: number,) => `/api/v1/checklists/${checklistId}/items/${itemId}` as const;

export type DeleteChecklistItemByIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteChecklistItemById>>>
export type DeleteChecklistItemByIdMutationError = AxiosError<Error>

/**
 * @summary Delete checklist item by checklistId and checklistItemId
 */
export const useDeleteChecklistItemById = <TError = AxiosError<Error>>(
  checklistId: number,
    itemId: number, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof deleteChecklistItemById>>, TError, string, Arguments, Awaited<ReturnType<typeof deleteChecklistItemById>>> & { swrKey?: string }, axios?: AxiosRequestConfig }
) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDeleteChecklistItemByIdMutationKey(checklistId,itemId);
  const swrFn = getDeleteChecklistItemByIdMutationFetcher(checklistId,itemId,axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * Checklist item or checklist not found
 * @summary Update checklist item by checklist id and item id
 */
export const updateChecklistItemBychecklistIdAndItemId = (
    checklistId: number,
    itemId: number,
    updateChecklistItemRequest: UpdateChecklistItemRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ChecklistItemResponse>> => {
    return axios.put(
      `/api/v1/checklists/${checklistId}/items/${itemId}`,
      updateChecklistItemRequest,options
    );
  }



export const getUpdateChecklistItemBychecklistIdAndItemIdMutationFetcher = (checklistId: number,
    itemId: number, options?: AxiosRequestConfig) => {
  return (_: string, { arg }: { arg: UpdateChecklistItemRequest }): Promise<AxiosResponse<ChecklistItemResponse>> => {
    return updateChecklistItemBychecklistIdAndItemId(checklistId, itemId, arg, options);
  }
}
export const getUpdateChecklistItemBychecklistIdAndItemIdMutationKey = (checklistId: number,
    itemId: number,) => `/api/v1/checklists/${checklistId}/items/${itemId}` as const;

export type UpdateChecklistItemBychecklistIdAndItemIdMutationResult = NonNullable<Awaited<ReturnType<typeof updateChecklistItemBychecklistIdAndItemId>>>
export type UpdateChecklistItemBychecklistIdAndItemIdMutationError = AxiosError<Error>

/**
 * @summary Update checklist item by checklist id and item id
 */
export const useUpdateChecklistItemBychecklistIdAndItemId = <TError = AxiosError<Error>>(
  checklistId: number,
    itemId: number, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof updateChecklistItemBychecklistIdAndItemId>>, TError, string, UpdateChecklistItemRequest, Awaited<ReturnType<typeof updateChecklistItemBychecklistIdAndItemId>>> & { swrKey?: string }, axios?: AxiosRequestConfig }
) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getUpdateChecklistItemBychecklistIdAndItemIdMutationKey(checklistId,itemId);
  const swrFn = getUpdateChecklistItemBychecklistIdAndItemIdMutationFetcher(checklistId,itemId,axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * @summary Change checklist item order number
 */
export const changeChecklistItemOrderNumber = (
    checklistId: number,
    itemId: number,
    changeChecklistItemOrderNumberBody: ChangeChecklistItemOrderNumberBody,
    params?: ChangeChecklistItemOrderNumberParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ChangeChecklistItemOrderNumber200>> => {
    return axios.patch(
      `/api/v1/checklists/${checklistId}/items/${itemId}/change-order`,
      changeChecklistItemOrderNumberBody,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getChangeChecklistItemOrderNumberMutationFetcher = (checklistId: number,
    itemId: number,
    params?: ChangeChecklistItemOrderNumberParams, options?: AxiosRequestConfig) => {
  return (_: string, { arg }: { arg: ChangeChecklistItemOrderNumberBody }): Promise<AxiosResponse<ChangeChecklistItemOrderNumber200>> => {
    return changeChecklistItemOrderNumber(checklistId, itemId, arg, params, options);
  }
}
export const getChangeChecklistItemOrderNumberMutationKey = (checklistId: number,
    itemId: number,) => `/api/v1/checklists/${checklistId}/items/${itemId}/change-order` as const;

export type ChangeChecklistItemOrderNumberMutationResult = NonNullable<Awaited<ReturnType<typeof changeChecklistItemOrderNumber>>>
export type ChangeChecklistItemOrderNumberMutationError = AxiosError<Error>

/**
 * @summary Change checklist item order number
 */
export const useChangeChecklistItemOrderNumber = <TError = AxiosError<Error>>(
  checklistId: number,
    itemId: number,
    params?: ChangeChecklistItemOrderNumberParams, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof changeChecklistItemOrderNumber>>, TError, string, ChangeChecklistItemOrderNumberBody, Awaited<ReturnType<typeof changeChecklistItemOrderNumber>>> & { swrKey?: string }, axios?: AxiosRequestConfig }
) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getChangeChecklistItemOrderNumberMutationKey(checklistId,itemId);
  const swrFn = getChangeChecklistItemOrderNumberMutationFetcher(checklistId,itemId,params,axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
