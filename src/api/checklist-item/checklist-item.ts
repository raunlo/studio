/**
 * Generated by orval v6.31.0 🍺
 * Do not edit manually.
 * Checklist service v1
 * Checklist service v1
 * OpenAPI spec version: 1.0.0
 */
import useSwr from 'swr'
import type {
  Arguments,
  Key,
  SWRConfiguration
} from 'swr'
import useSWRMutation from 'swr/mutation'
import type {
  SWRMutationConfiguration
} from 'swr/mutation'
import type {
  ChangeChecklistItemOrderNumber200,
  ChangeChecklistItemOrderNumberBody,
  ChangeChecklistItemOrderNumberParams,
  ChecklistItemResponse,
  ChecklistItemRowResponse,
  CreateChecklistItemRequest,
  CreateChecklistItemRowRequest,
  Error,
  GetAllChecklistItemsParams,
  ToggleChecklistItemCompleteBody,
  UpdateChecklistItemRequest
} from '../checklistServiceV1.schemas'
import { customInstance } from '../../lib/axios';


  
  /**
 * @summary Get all checklist items by checklist ID
 */
export const getAllChecklistItems = (
    checklistId: number,
    params?: GetAllChecklistItemsParams,
 ) => {
      return customInstance<ChecklistItemResponse[]>(
      {url: `/api/v1/checklists/${checklistId}/items`, method: 'GET',
        params
    },
      );
    }
  


export const getGetAllChecklistItemsKey = (checklistId: number,
    params?: GetAllChecklistItemsParams,) => [`/api/v1/checklists/${checklistId}/items`, ...(params ? [params]: [])] as const;


export type GetAllChecklistItemsQueryResult = NonNullable<Awaited<ReturnType<typeof getAllChecklistItems>>>
export type GetAllChecklistItemsQueryError = Error

/**
 * @summary Get all checklist items by checklist ID
 */
export const useGetAllChecklistItems = <TError = Error>(
  checklistId: number,
    params?: GetAllChecklistItemsParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getAllChecklistItems>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(checklistId)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetAllChecklistItemsKey(checklistId,params) : null);
  const swrFn = () => getAllChecklistItems(checklistId,params, );

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * @summary Create a new checklist item
 */
export const createChecklistItem = (
    checklistId: number,
    createChecklistItemRequest: CreateChecklistItemRequest,
 ) => {
      return customInstance<ChecklistItemResponse>(
      {url: `/api/v1/checklists/${checklistId}/items`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createChecklistItemRequest
    },
      );
    }
  


export const getCreateChecklistItemMutationFetcher = (checklistId: number, ) => {
  return (_: string, { arg }: { arg: CreateChecklistItemRequest }): Promise<ChecklistItemResponse> => {
    return createChecklistItem(checklistId, arg);
  }
}
export const getCreateChecklistItemMutationKey = (checklistId: number,) => `/api/v1/checklists/${checklistId}/items` as const;

export type CreateChecklistItemMutationResult = NonNullable<Awaited<ReturnType<typeof createChecklistItem>>>
export type CreateChecklistItemMutationError = Error

/**
 * @summary Create a new checklist item
 */
export const useCreateChecklistItem = <TError = Error>(
  checklistId: number, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof createChecklistItem>>, TError, string, CreateChecklistItemRequest, Awaited<ReturnType<typeof createChecklistItem>>> & { swrKey?: string },  }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getCreateChecklistItemMutationKey(checklistId);
  const swrFn = getCreateChecklistItemMutationFetcher(checklistId,);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * @summary Get checklist item by checklist id and item id
 */
export const getChecklistItemBychecklistIdAndItemId = (
    checklistId: number,
    itemId: number,
 ) => {
      return customInstance<ChecklistItemResponse>(
      {url: `/api/v1/checklists/${checklistId}/items/${itemId}`, method: 'GET'
    },
      );
    }
  


export const getGetChecklistItemBychecklistIdAndItemIdKey = (checklistId: number,
    itemId: number,) => [`/api/v1/checklists/${checklistId}/items/${itemId}`] as const;


export type GetChecklistItemBychecklistIdAndItemIdQueryResult = NonNullable<Awaited<ReturnType<typeof getChecklistItemBychecklistIdAndItemId>>>
export type GetChecklistItemBychecklistIdAndItemIdQueryError = Error

/**
 * @summary Get checklist item by checklist id and item id
 */
export const useGetChecklistItemBychecklistIdAndItemId = <TError = Error>(
  checklistId: number,
    itemId: number, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getChecklistItemBychecklistIdAndItemId>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(checklistId && itemId)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetChecklistItemBychecklistIdAndItemIdKey(checklistId,itemId) : null);
  const swrFn = () => getChecklistItemBychecklistIdAndItemId(checklistId,itemId, );

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * @summary Delete checklist item by checklistId and checklistItemId
 */
export const deleteChecklistItemById = (
    checklistId: number,
    itemId: number,
 ) => {
      return customInstance<ChecklistItemResponse>(
      {url: `/api/v1/checklists/${checklistId}/items/${itemId}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteChecklistItemByIdMutationFetcher = (checklistId: number,
    itemId: number, ) => {
  return (_: string, __: { arg: Arguments }): Promise<ChecklistItemResponse> => {
    return deleteChecklistItemById(checklistId, itemId);
  }
}
export const getDeleteChecklistItemByIdMutationKey = (checklistId: number,
    itemId: number,) => `/api/v1/checklists/${checklistId}/items/${itemId}` as const;

export type DeleteChecklistItemByIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteChecklistItemById>>>
export type DeleteChecklistItemByIdMutationError = Error

/**
 * @summary Delete checklist item by checklistId and checklistItemId
 */
export const useDeleteChecklistItemById = <TError = Error>(
  checklistId: number,
    itemId: number, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof deleteChecklistItemById>>, TError, string, Arguments, Awaited<ReturnType<typeof deleteChecklistItemById>>> & { swrKey?: string },  }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDeleteChecklistItemByIdMutationKey(checklistId,itemId);
  const swrFn = getDeleteChecklistItemByIdMutationFetcher(checklistId,itemId,);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * Checklist item or checklist not found
 * @summary Update checklist item by checklist id and item id
 */
export const updateChecklistItemBychecklistIdAndItemId = (
    checklistId: number,
    itemId: number,
    updateChecklistItemRequest: UpdateChecklistItemRequest,
 ) => {
      return customInstance<ChecklistItemResponse>(
      {url: `/api/v1/checklists/${checklistId}/items/${itemId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateChecklistItemRequest
    },
      );
    }
  


export const getUpdateChecklistItemBychecklistIdAndItemIdMutationFetcher = (checklistId: number,
    itemId: number, ) => {
  return (_: string, { arg }: { arg: UpdateChecklistItemRequest }): Promise<ChecklistItemResponse> => {
    return updateChecklistItemBychecklistIdAndItemId(checklistId, itemId, arg);
  }
}
export const getUpdateChecklistItemBychecklistIdAndItemIdMutationKey = (checklistId: number,
    itemId: number,) => `/api/v1/checklists/${checklistId}/items/${itemId}` as const;

export type UpdateChecklistItemBychecklistIdAndItemIdMutationResult = NonNullable<Awaited<ReturnType<typeof updateChecklistItemBychecklistIdAndItemId>>>
export type UpdateChecklistItemBychecklistIdAndItemIdMutationError = Error

/**
 * @summary Update checklist item by checklist id and item id
 */
export const useUpdateChecklistItemBychecklistIdAndItemId = <TError = Error>(
  checklistId: number,
    itemId: number, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof updateChecklistItemBychecklistIdAndItemId>>, TError, string, UpdateChecklistItemRequest, Awaited<ReturnType<typeof updateChecklistItemBychecklistIdAndItemId>>> & { swrKey?: string },  }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getUpdateChecklistItemBychecklistIdAndItemIdMutationKey(checklistId,itemId);
  const swrFn = getUpdateChecklistItemBychecklistIdAndItemIdMutationFetcher(checklistId,itemId,);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * @summary Toggle checklist item completion status
 */
export const toggleChecklistItemComplete = (
    checklistId: number,
    itemId: number,
    toggleChecklistItemCompleteBody: ToggleChecklistItemCompleteBody,
 ) => {
      return customInstance<ChecklistItemResponse>(
      {url: `/api/v1/checklists/${checklistId}/items/${itemId}/toggle-complete`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: toggleChecklistItemCompleteBody
    },
      );
    }
  


export const getToggleChecklistItemCompleteMutationFetcher = (checklistId: number,
    itemId: number, ) => {
  return (_: string, { arg }: { arg: ToggleChecklistItemCompleteBody }): Promise<ChecklistItemResponse> => {
    return toggleChecklistItemComplete(checklistId, itemId, arg);
  }
}
export const getToggleChecklistItemCompleteMutationKey = (checklistId: number,
    itemId: number,) => `/api/v1/checklists/${checklistId}/items/${itemId}/toggle-complete` as const;

export type ToggleChecklistItemCompleteMutationResult = NonNullable<Awaited<ReturnType<typeof toggleChecklistItemComplete>>>
export type ToggleChecklistItemCompleteMutationError = Error

/**
 * @summary Toggle checklist item completion status
 */
export const useToggleChecklistItemComplete = <TError = Error>(
  checklistId: number,
    itemId: number, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof toggleChecklistItemComplete>>, TError, string, ToggleChecklistItemCompleteBody, Awaited<ReturnType<typeof toggleChecklistItemComplete>>> & { swrKey?: string },  }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getToggleChecklistItemCompleteMutationKey(checklistId,itemId);
  const swrFn = getToggleChecklistItemCompleteMutationFetcher(checklistId,itemId,);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * @summary Change checklist item order number
 */
export const changeChecklistItemOrderNumber = (
    checklistId: number,
    itemId: number,
    changeChecklistItemOrderNumberBody: ChangeChecklistItemOrderNumberBody,
    params?: ChangeChecklistItemOrderNumberParams,
 ) => {
      return customInstance<ChangeChecklistItemOrderNumber200>(
      {url: `/api/v1/checklists/${checklistId}/items/${itemId}/change-order`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: changeChecklistItemOrderNumberBody,
        params
    },
      );
    }
  


export const getChangeChecklistItemOrderNumberMutationFetcher = (checklistId: number,
    itemId: number,
    params?: ChangeChecklistItemOrderNumberParams, ) => {
  return (_: string, { arg }: { arg: ChangeChecklistItemOrderNumberBody }): Promise<ChangeChecklistItemOrderNumber200> => {
    return changeChecklistItemOrderNumber(checklistId, itemId, arg, params);
  }
}
export const getChangeChecklistItemOrderNumberMutationKey = (checklistId: number,
    itemId: number,) => `/api/v1/checklists/${checklistId}/items/${itemId}/change-order` as const;

export type ChangeChecklistItemOrderNumberMutationResult = NonNullable<Awaited<ReturnType<typeof changeChecklistItemOrderNumber>>>
export type ChangeChecklistItemOrderNumberMutationError = Error

/**
 * @summary Change checklist item order number
 */
export const useChangeChecklistItemOrderNumber = <TError = Error>(
  checklistId: number,
    itemId: number,
    params?: ChangeChecklistItemOrderNumberParams, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof changeChecklistItemOrderNumber>>, TError, string, ChangeChecklistItemOrderNumberBody, Awaited<ReturnType<typeof changeChecklistItemOrderNumber>>> & { swrKey?: string },  }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getChangeChecklistItemOrderNumberMutationKey(checklistId,itemId);
  const swrFn = getChangeChecklistItemOrderNumberMutationFetcher(checklistId,itemId,params,);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * @summary Create checklist item row
 */
export const createChecklistItemRow = (
    checklistId: number,
    itemId: number,
    createChecklistItemRowRequest: CreateChecklistItemRowRequest,
 ) => {
      return customInstance<ChecklistItemRowResponse>(
      {url: `/api/v1/checklists/${checklistId}/items/${itemId}/rows`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createChecklistItemRowRequest
    },
      );
    }
  


export const getCreateChecklistItemRowMutationFetcher = (checklistId: number,
    itemId: number, ) => {
  return (_: string, { arg }: { arg: CreateChecklistItemRowRequest }): Promise<ChecklistItemRowResponse> => {
    return createChecklistItemRow(checklistId, itemId, arg);
  }
}
export const getCreateChecklistItemRowMutationKey = (checklistId: number,
    itemId: number,) => `/api/v1/checklists/${checklistId}/items/${itemId}/rows` as const;

export type CreateChecklistItemRowMutationResult = NonNullable<Awaited<ReturnType<typeof createChecklistItemRow>>>
export type CreateChecklistItemRowMutationError = Error

/**
 * @summary Create checklist item row
 */
export const useCreateChecklistItemRow = <TError = Error>(
  checklistId: number,
    itemId: number, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof createChecklistItemRow>>, TError, string, CreateChecklistItemRowRequest, Awaited<ReturnType<typeof createChecklistItemRow>>> & { swrKey?: string },  }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getCreateChecklistItemRowMutationKey(checklistId,itemId);
  const swrFn = getCreateChecklistItemRowMutationFetcher(checklistId,itemId,);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * @summary Delete checklist item row by checklistId, itemId and rowId
 */
export const deleteChecklistItemRow = (
    checklistId: number,
    itemId: number,
    rowId: number,
 ) => {
      return customInstance<void>(
      {url: `/api/v1/checklists/${checklistId}/items/${itemId}/rows/${rowId}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteChecklistItemRowMutationFetcher = (checklistId: number,
    itemId: number,
    rowId: number, ) => {
  return (_: string, __: { arg: Arguments }): Promise<void> => {
    return deleteChecklistItemRow(checklistId, itemId, rowId);
  }
}
export const getDeleteChecklistItemRowMutationKey = (checklistId: number,
    itemId: number,
    rowId: number,) => `/api/v1/checklists/${checklistId}/items/${itemId}/rows/${rowId}` as const;

export type DeleteChecklistItemRowMutationResult = NonNullable<Awaited<ReturnType<typeof deleteChecklistItemRow>>>
export type DeleteChecklistItemRowMutationError = Error

/**
 * @summary Delete checklist item row by checklistId, itemId and rowId
 */
export const useDeleteChecklistItemRow = <TError = Error>(
  checklistId: number,
    itemId: number,
    rowId: number, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof deleteChecklistItemRow>>, TError, string, Arguments, Awaited<ReturnType<typeof deleteChecklistItemRow>>> & { swrKey?: string },  }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDeleteChecklistItemRowMutationKey(checklistId,itemId,rowId);
  const swrFn = getDeleteChecklistItemRowMutationFetcher(checklistId,itemId,rowId,);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
