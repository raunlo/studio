/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * Checklist service v1
 * Checklist service v1
 * OpenAPI spec version: 1.0.0
 */
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import useSwr from 'swr'
import type {
  Arguments,
  Key,
  SWRConfiguration
} from 'swr'
import useSWRMutation from 'swr/mutation'
import type {
  SWRMutationConfiguration
} from 'swr/mutation'
import type {
  ChecklistResponse,
  CreateChecklistRequest,
  Error
} from '../checklistServiceV1.schemas'


  
  /**
 * @summary Get all checklists
 */
export const getAllChecklists = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ChecklistResponse[]>> => {
    return axios.get(
      `/api/v1/checklists`,options
    );
  }



export const getGetAllChecklistsKey = () => [`/api/v1/checklists`] as const;


export type GetAllChecklistsQueryResult = NonNullable<Awaited<ReturnType<typeof getAllChecklists>>>
export type GetAllChecklistsQueryError = AxiosError<Error>

/**
 * @summary Get all checklists
 */
export const useGetAllChecklists = <TError = AxiosError<Error>>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getAllChecklists>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }
) => {
  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetAllChecklistsKey() : null);
  const swrFn = () => getAllChecklists(axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * @summary Create a new checklist
 */
export const createChecklist = (
    createChecklistRequest: CreateChecklistRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ChecklistResponse>> => {
    return axios.post(
      `/api/v1/checklists`,
      createChecklistRequest,options
    );
  }



export const getCreateChecklistMutationFetcher = ( options?: AxiosRequestConfig) => {
  return (_: string, { arg }: { arg: CreateChecklistRequest }): Promise<AxiosResponse<ChecklistResponse>> => {
    return createChecklist(arg, options);
  }
}
export const getCreateChecklistMutationKey = () => `/api/v1/checklists` as const;

export type CreateChecklistMutationResult = NonNullable<Awaited<ReturnType<typeof createChecklist>>>
export type CreateChecklistMutationError = AxiosError<Error>

/**
 * @summary Create a new checklist
 */
export const useCreateChecklist = <TError = AxiosError<Error>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof createChecklist>>, TError, string, CreateChecklistRequest, Awaited<ReturnType<typeof createChecklist>>> & { swrKey?: string }, axios?: AxiosRequestConfig }
) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getCreateChecklistMutationKey();
  const swrFn = getCreateChecklistMutationFetcher(axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * @summary Get checklist by ID
 */
export const getChecklistById = (
    checklistId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ChecklistResponse>> => {
    return axios.get(
      `/api/v1/checklists/${checklistId}`,options
    );
  }



export const getGetChecklistByIdKey = (checklistId: number,) => [`/api/v1/checklists/${checklistId}`] as const;


export type GetChecklistByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getChecklistById>>>
export type GetChecklistByIdQueryError = AxiosError<Error>

/**
 * @summary Get checklist by ID
 */
export const useGetChecklistById = <TError = AxiosError<Error>>(
  checklistId: number, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getChecklistById>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }
) => {
  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(checklistId)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetChecklistByIdKey(checklistId) : null);
  const swrFn = () => getChecklistById(checklistId, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * @summary Update checklist by ID
 */
export const updateChecklistById = (
    checklistId: number,
    createChecklistRequest: CreateChecklistRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ChecklistResponse>> => {
    return axios.put(
      `/api/v1/checklists/${checklistId}`,
      createChecklistRequest,options
    );
  }



export const getUpdateChecklistByIdMutationFetcher = (checklistId: number, options?: AxiosRequestConfig) => {
  return (_: string, { arg }: { arg: CreateChecklistRequest }): Promise<AxiosResponse<ChecklistResponse>> => {
    return updateChecklistById(checklistId, arg, options);
  }
}
export const getUpdateChecklistByIdMutationKey = (checklistId: number,) => `/api/v1/checklists/${checklistId}` as const;

export type UpdateChecklistByIdMutationResult = NonNullable<Awaited<ReturnType<typeof updateChecklistById>>>
export type UpdateChecklistByIdMutationError = AxiosError<Error>

/**
 * @summary Update checklist by ID
 */
export const useUpdateChecklistById = <TError = AxiosError<Error>>(
  checklistId: number, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof updateChecklistById>>, TError, string, CreateChecklistRequest, Awaited<ReturnType<typeof updateChecklistById>>> & { swrKey?: string }, axios?: AxiosRequestConfig }
) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getUpdateChecklistByIdMutationKey(checklistId);
  const swrFn = getUpdateChecklistByIdMutationFetcher(checklistId,axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * @summary Delete checklist by ID
 */
export const deleteChecklistById = (
    checklistId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ChecklistResponse>> => {
    return axios.delete(
      `/api/v1/checklists/${checklistId}`,options
    );
  }



export const getDeleteChecklistByIdMutationFetcher = (checklistId: number, options?: AxiosRequestConfig) => {
  return (_: string, __: { arg: Arguments }): Promise<AxiosResponse<ChecklistResponse>> => {
    return deleteChecklistById(checklistId, options);
  }
}
export const getDeleteChecklistByIdMutationKey = (checklistId: number,) => `/api/v1/checklists/${checklistId}` as const;

export type DeleteChecklistByIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteChecklistById>>>
export type DeleteChecklistByIdMutationError = AxiosError<Error>

/**
 * @summary Delete checklist by ID
 */
export const useDeleteChecklistById = <TError = AxiosError<Error>>(
  checklistId: number, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof deleteChecklistById>>, TError, string, Arguments, Awaited<ReturnType<typeof deleteChecklistById>>> & { swrKey?: string }, axios?: AxiosRequestConfig }
) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDeleteChecklistByIdMutationKey(checklistId);
  const swrFn = getDeleteChecklistByIdMutationFetcher(checklistId,axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
