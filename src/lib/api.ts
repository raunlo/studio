/**
 * Generated by orval v6.29.0 üç∫
 * Do not edit manually.
 * Checklist API
 * API for managing checklists and their items.
 * OpenAPI spec version: 1.0.0
 */
import useSWR, { SWRConfiguration, SWRResponse } from 'swr';
import useSWRMutation, {
  SWRMutationConfiguration,
  SWRMutationResponse,
} from 'swr/mutation';
import type {
  Checklist,
  CreateChecklist,
  CreateItem,
  CreateSubItem,
  GetChecklistsParams,
  Item,
  SubItem,
  UpdateItem,
  UpdateSubItem,
} from './api.schemas';
import { customInstance } from './axios';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary Get all checklists
 */
export const getChecklists = (params?: GetChecklistsParams) => {
  return customInstance<Checklist[]>({
    url: `/api/v1/checklists`,
    method: 'GET',
    params,
  });
};

export const getGetChecklistsSWR = (
  params?: GetChecklistsParams,
  options?: SWRConfiguration<Awaited<ReturnType<typeof getChecklists>>>,
) => {
  const isEnabled = options?.isEnabled !== false;
  const swrKey =
    `swr:/api/v1/checklists` + (params ? JSON.stringify(params) : '');
  const swrFetcher = () => getChecklists(params);
  const swrObj = useSWR(isEnabled ? swrKey : null, swrFetcher, options);
  return swrObj;
};

export const useGetChecklists = (
  params?: GetChecklistsParams,
  options?: SWRConfiguration<Awaited<ReturnType<typeof getChecklists>>>,
) => {
  const swrObj = getGetChecklistsSWR(params, options);

  const { data, error, isLoading, isValidating, mutate } = swrObj;

  return { data, error, isLoading, isValidating, mutate };
};

/**
 * @summary Create a new checklist
 */
export const createChecklist = (createChecklist: CreateChecklist) => {
  return customInstance<Checklist>({
    url: `/api/v1/checklists`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createChecklist,
  });
};

export const getCreateChecklistMutationFetcher = (
  createChecklist: CreateChecklist,
) => {
  return () => createChecklist(createChecklist);
};
export const getCreateChecklistSWRMutation = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof createChecklist>>,
    TError,
    undefined,
    CreateChecklist,
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const swrMutation = useSWRMutation<
    Awaited<ReturnType<typeof createChecklist>>,
    TError,
    undefined,
    CreateChecklist,
    TContext
  >(
    'swr:/api/v1/checklists',
    (
      _key: string,
      {
        arg,
      }: {
        arg: CreateChecklist;
      },
    ) => {
      const fetcher = getCreateChecklistMutationFetcher(arg);
      return fetcher();
    },
    mutationOptions,
  );
  return swrMutation;
};

export const useCreateChecklist = <TError = unknown, TContext = unknown>(options?: {
  mutation?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof createChecklist>>,
    TError,
    undefined,
    CreateChecklist,
    TContext
  >;
}) => {
  const { trigger, data, error, isMutating, reset } =
    getCreateChecklistSWRMutation(options);
  return { trigger, data, error, isMutating, reset };
};

/**
 * @summary Update a checklist's title
 */
export const updateChecklistTitle = (
  id: string,
  updateChecklistTitleBody: {name?: string},
) => {
  return customInstance<Checklist>({
    url: `/api/v1/checklists/${id}`,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json' },
    data: updateChecklistTitleBody,
  });
};

export const getUpdateChecklistTitleMutationFetcher = (
  id: string,
  updateChecklistTitleBody: {name?: string},
) => {
  return () => updateChecklistTitle(id, updateChecklistTitleBody);
};
export const getUpdateChecklistTitleSWRMutation = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof updateChecklistTitle>>,
    TError,
    {
      id: string;
      data: {name?: string};
    },
    string,
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const swrMutation = useSWRMutation<
    Awaited<ReturnType<typeof updateChecklistTitle>>,
    TError,
    {
      id: string;
      data: {name?: string};
    },
    string,
    TContext
  >(
    (key) => `swr:/api/v1/checklists/${key.id}`,
    (
      _key: string,
      {
        arg,
      }: {
        arg: {
          id: string;
          data: {name?: string};
        };
      },
    ) => {
      const { id, data } = arg;
      const fetcher = getUpdateChecklistTitleMutationFetcher(id, data);
      return fetcher();
    },
    mutationOptions,
  );
  return swrMutation;
};

export const useUpdateChecklistTitle = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof updateChecklistTitle>>,
    TError,
    {
      id: string;
      data: {name?: string};
    },
    string,
    TContext
  >;
}) => {
  const { trigger, data, error, isMutating, reset } =
    getUpdateChecklistTitleSWRMutation(options);
  return { trigger, data, error, isMutating, reset };
};

/**
 * @summary Delete a checklist
 */
export const deleteChecklist = (id: string) => {
  return customInstance<void>({
    url: `/api/v1/checklists/${id}`,
    method: 'DELETE',
  });
};

export const getDeleteChecklistMutationFetcher = (id: string) => {
  return () => deleteChecklist(id);
};
export const getDeleteChecklistSWRMutation = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof deleteChecklist>>,
    TError,
    {
      id: string;
    },
    string,
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const swrMutation = useSWRMutation<
    Awaited<ReturnType<typeof deleteChecklist>>,
    TError,
    {
      id: string;
    },
    string,
    TContext
  >(
    (key) => `swr:/api/v1/checklists/${key.id}`,
    (
      _key: string,
      {
        arg,
      }: {
        arg: {
          id: string;
        };
      },
    ) => {
      const { id } = arg;
      const fetcher = getDeleteChecklistMutationFetcher(id);
      return fetcher();
    },
    mutationOptions,
  );
  return swrMutation;
};

export const useDeleteChecklist = <TError = unknown, TContext = unknown>(options?: {
  mutation?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof deleteChecklist>>,
    TError,
    {
      id: string;
    },
    string,
    TContext
  >;
}) => {
  const { trigger, data, error, isMutating, reset } =
    getDeleteChecklistSWRMutation(options);
  return { trigger, data, error, isMutating, reset };
};

/**
 * @summary Add an item to a checklist
 */
export const addItem = (id: string, createItem: CreateItem) => {
  return customInstance<Item>({
    url: `/api/v1/checklists/${id}/items`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createItem,
  });
};

export const getAddItemMutationFetcher = (
  id: string,
  createItem: CreateItem,
) => {
  return () => addItem(id, createItem);
};
export const getAddItemSWRMutation = <TError = unknown, TContext = unknown>(options?: {
  mutation?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof addItem>>,
    TError,
    {
      id: string;
      data: CreateItem;
    },
    string,
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const swrMutation = useSWRMutation<
    Awaited<ReturnType<typeof addItem>>,
    TError,
    {
      id: string;
      data: CreateItem;
    },
    string,
    TContext
  >(
    'swr:/api/v1/checklists/items',
    (
      _key: string,
      {
        arg,
      }: {
        arg: {
          id: string;
          data: CreateItem;
        };
      },
    ) => {
      const { id, data } = arg;
      const fetcher = getAddItemMutationFetcher(id, data);
      return fetcher();
    },
    mutationOptions,
  );
  return swrMutation;
};

export const useAddItem = <TError = unknown, TContext = unknown>(options?: {
  mutation?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof addItem>>,
    TError,
    {
      id: string;
      data: CreateItem;
    },
    string,
    TContext
  >;
}) => {
  const { trigger, data, error, isMutating, reset } =
    getAddItemSWRMutation(options);
  return { trigger, data, error, isMutating, reset };
};

/**
 * @summary Update a checklist item
 */
export const updateItem = (
  checklistId: string,
  itemId: string,
  updateItem: UpdateItem,
) => {
  return customInstance<Item>({
    url: `/api/v1/checklists/${checklistId}/items/${itemId}`,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json' },
    data: updateItem,
  });
};

export const getUpdateItemMutationFetcher = (
  checklistId: string,
  itemId: string,
  updateItem: UpdateItem,
) => {
  return () => updateItem(checklistId, itemId, updateItem);
};
export const getUpdateItemSWRMutation = <TError = unknown, TContext = unknown>(options?: {
  mutation?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof updateItem>>,
    TError,
    {
      checklistId: string;
      itemId: string;
      data: UpdateItem;
    },
    string,
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const swrMutation = useSWRMutation<
    Awaited<ReturnType<typeof updateItem>>,
    TError,
    {
      checklistId: string;
      itemId: string;
      data: UpdateItem;
    },
    string,
    TContext
  >(
    (key) => `swr:/api/v1/checklists/${key.checklistId}/items/${key.itemId}`,
    (
      _key: string,
      {
        arg,
      }: {
        arg: {
          checklistId: string;
          itemId: string;
          data: UpdateItem;
        };
      },
    ) => {
      const { checklistId, itemId, data } = arg;
      const fetcher = getUpdateItemMutationFetcher(checklistId, itemId, data);
      return fetcher();
    },
    mutationOptions,
  );
  return swrMutation;
};

export const useUpdateItem = <TError = unknown, TContext = unknown>(options?: {
  mutation?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof updateItem>>,
    TError,
    {
      checklistId: string;
      itemId: string;
      data: UpdateItem;
    },
    string,
    TContext
  >;
}) => {
  const { trigger, data, error, isMutating, reset } =
    getUpdateItemSWRMutation(options);
  return { trigger, data, error, isMutating, reset };
};

/**
 * @summary Delete a checklist item
 */
export const deleteItem = (checklistId: string, itemId: string) => {
  return customInstance<void>({
    url: `/api/v1/checklists/${checklistId}/items/${itemId}`,
    method: 'DELETE',
  });
};

export const getDeleteItemMutationFetcher = (
  checklistId: string,
  itemId: string,
) => {
  return () => deleteItem(checklistId, itemId);
};
export const getDeleteItemSWRMutation = <TError = unknown, TContext = unknown>(options?: {
  mutation?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof deleteItem>>,
    TError,
    {
      checklistId: string;
      itemId: string;
    },
    string,
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const swrMutation = useSWRMutation<
    Awaited<ReturnType<typeof deleteItem>>,
    TError,
    {
      checklistId: string;
      itemId: string;
    },
    string,
    TContext
  >(
    (key) => `swr:/api/v1/checklists/${key.checklistId}/items/${key.itemId}`,
    (
      _key: string,
      {
        arg,
      }: {
        arg: {
          checklistId: string;
          itemId: string;
        };
      },
    ) => {
      const { checklistId, itemId } = arg;
      const fetcher = getDeleteItemMutationFetcher(checklistId, itemId);
      return fetcher();
    },
    mutationOptions,
  );
  return swrMutation;
};

export const useDeleteItem = <TError = unknown, TContext = unknown>(options?: {
  mutation?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof deleteItem>>,
    TError,
    {
      checklistId: string;
      itemId: string;
    },
    string,
    TContext
  >;
}) => {
  const { trigger, data, error, isMutating, reset } =
    getDeleteItemSWRMutation(options);
  return { trigger, data, error, isMutating, reset };
};

/**
 * @summary Reorder an item in a checklist
 */
export const reorderItem = (
  checklistId: string,
  itemId: string,
  reorderItemBody: {newPosition?: number},
) => {
  return customInstance<void>({
    url: `/api/v1/checklists/${checklistId}/items/${itemId}/reorder`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: reorderItemBody,
  });
};

export const getReorderItemMutationFetcher = (
  checklistId: string,
  itemId: string,
  reorderItemBody: {newPosition?: number},
) => {
  return () => reorderItem(checklistId, itemId, reorderItemBody);
};
export const getReorderItemSWRMutation = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof reorderItem>>,
    TError,
    {
      checklistId: string;
      itemId: string;
      data: {newPosition?: number};
    },
    string,
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const swrMutation = useSWRMutation<
    Awaited<ReturnType<typeof reorderItem>>,
    TError,
    {
      checklistId: string;
      itemId: string;
      data: {newPosition?: number};
    },
    string,
    TContext
  >(
    (key) =>
      `swr:/api/v1/checklists/${key.checklistId}/items/${key.itemId}/reorder`,
    (
      _key: string,
      {
        arg,
      }: {
        arg: {
          checklistId: string;
          itemId: string;
          data: {newPosition?: number};
        };
      },
    ) => {
      const { checklistId, itemId, data } = arg;
      const fetcher = getReorderItemMutationFetcher(checklistId, itemId, data);
      return fetcher();
    },
    mutationOptions,
  );
  return swrMutation;
};

export const useReorderItem = <TError = unknown, TContext = unknown>(options?: {
  mutation?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof reorderItem>>,
    TError,
    {
      checklistId: string;
      itemId: string;
      data: {newPosition?: number};
    },
    string,
    TContext
  >;
}) => {
  const { trigger, data, error, isMutating, reset } =
    getReorderItemSWRMutation(options);
  return { trigger, data, error, isMutating, reset };
};

/**
 * @summary Add a sub-item to a checklist item
 */
export const addSubItem = (
  checklistId: string,
  itemId: string,
  createSubItem: CreateSubItem,
) => {
  return customInstance<SubItem>({
    url: `/api/v1/checklists/${checklistId}/items/${itemId}/subitems`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createSubItem,
  });
};

export const getAddSubItemMutationFetcher = (
  checklistId: string,
  itemId: string,
  createSubItem: CreateSubItem,
) => {
  return () => addSubItem(checklistId, itemId, createSubItem);
};
export const getAddSubItemSWRMutation = <TError = unknown, TContext = unknown>(options?: {
  mutation?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof addSubItem>>,
    TError,
    {
      checklistId: string;
      itemId: string;
      data: CreateSubItem;
    },
    string,
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const swrMutation = useSWRMutation<
    Awaited<ReturnType<typeof addSubItem>>,
    TError,
    {
      checklistId: string;
      itemId: string;
      data: CreateSubItem;
    },
    string,
    TContext
  >(
    (key) =>
      `swr:/api/v1/checklists/${key.checklistId}/items/${key.itemId}/subitems`,
    (
      _key: string,
      {
        arg,
      }: {
        arg: {
          checklistId: string;
          itemId: string;
          data: CreateSubItem;
        };
      },
    ) => {
      const { checklistId, itemId, data } = arg;
      const fetcher = getAddSubItemMutationFetcher(checklistId, itemId, data);
      return fetcher();
    },
    mutationOptions,
  );
  return swrMutation;
};

export const useAddSubItem = <TError = unknown, TContext = unknown>(options?: {
  mutation?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof addSubItem>>,
    TError,
    {
      checklistId: string;
      itemId: string;
      data: CreateSubItem;
    },
    string,
    TContext
  >;
}) => {
  const { trigger, data, error, isMutating, reset } =
    getAddSubItemSWRMutation(options);
  return { trigger, data, error, isMutating, reset };
};

/**
 * @summary Update a sub-item
 */
export const updateSubItem = (
  checklistId: string,
  itemId: string,
  subItemId: string,
  updateSubItem: UpdateSubItem,
) => {
  return customInstance<SubItem>({
    url: `/api/v1/checklists/${checklistId}/items/${itemId}/subitems/${subItemId}`,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json' },
    data: updateSubItem,
  });
};

export const getUpdateSubItemMutationFetcher = (
  checklistId: string,
  itemId: string,
  subItemId: string,
  updateSubItem: UpdateSubItem,
) => {
  return () => updateSubItem(checklistId, itemId, subItemId, updateSubItem);
};
export const getUpdateSubItemSWRMutation = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof updateSubItem>>,
    TError,
    {
      checklistId: string;
      itemId: string;
      subItemId: string;
      data: UpdateSubItem;
    },
    string,
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const swrMutation = useSWRMutation<
    Awaited<ReturnType<typeof updateSubItem>>,
    TError,
    {
      checklistId: string;
      itemId: string;
      subItemId: string;
      data: UpdateSubItem;
    },
    string,
    TContext
  >(
    (key) =>
      `swr:/api/v1/checklists/${key.checklistId}/items/${key.itemId}/subitems/${key.subItemId}`,
    (
      _key: string,
      {
        arg,
      }: {
        arg: {
          checklistId: string;
          itemId: string;
          subItemId: string;
          data: UpdateSubItem;
        };
      },
    ) => {
      const { checklistId, itemId, subItemId, data } = arg;
      const fetcher = getUpdateSubItemMutationFetcher(
        checklistId,
        itemId,
        subItemId,
        data,
      );
      return fetcher();
    },
    mutationOptions,
  );
  return swrMutation;
};

export const useUpdateSubItem = <TError = unknown, TContext = unknown>(options?: {
  mutation?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof updateSubItem>>,
    TError,
    {
      checklistId: string;
      itemId: string;
      subItemId: string;
      data: UpdateSubItem;
    },
    string,
    TContext
  >;
}) => {
  const { trigger, data, error, isMutating, reset } =
    getUpdateSubItemSWRMutation(options);
  return { trigger, data, error, isMutating, reset };
};

/**
 * @summary Delete a sub-item
 */
export const deleteSubItem = (
  checklistId: string,
  itemId: string,
  subItemId: string,
) => {
  return customInstance<void>({
    url: `/api/v1/checklists/${checklistId}/items/${itemId}/subitems/${subItemId}`,
    method: 'DELETE',
  });
};

export const getDeleteSubItemMutationFetcher = (
  checklistId: string,
  itemId: string,
  subItemId: string,
) => {
  return () => deleteSubItem(checklistId, itemId, subItemId);
};
export const getDeleteSubItemSWRMutation = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof deleteSubItem>>,
    TError,
    {
      checklistId: string;
      itemId: string;
      subItemId: string;
    },
    string,
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const swrMutation = useSWRMutation<
    Awaited<ReturnType<typeof deleteSubItem>>,
    TError,
    {
      checklistId: string;
      itemId: string;
      subItemId: string;
    },
    string,
    TContext
  >(
    (key) =>
      `swr:/api/v1/checklists/${key.checklistId}/items/${key.itemId}/subitems/${key.subItemId}`,
    (
      _key: string,
      {
        arg,
      }: {
        arg: {
          checklistId: string;
          itemId: string;
          subItemId: string;
        };
      },
    ) => {
      const { checklistId, itemId, subItemId } = arg;
      const fetcher = getDeleteSubItemMutationFetcher(
        checklistId,
        itemId,
        subItemId,
      );
      return fetcher();
    },
    mutationOptions,
  );
  return swrMutation;
};

export const useDeleteSubItem = <TError = unknown, TContext = unknown>(options?: {
  mutation?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof deleteSubItem>>,
    TError,
    {
      checklistId: string;
      itemId: string;
      subItemId: string;
    },
    string,
    TContext
  >;
}) => {
  const { trigger, data, error, isMutating, reset } =
    getDeleteSubItemSWRMutation(options);
  return { trigger, data, error, isMutating, reset };
};
export type GetChecklists200 = {
  checklists?: Checklist[];
};

export type UpdateChecklistTitleBody = {
  name?: string;
};

export type ReorderItemBody = {
  newPosition?: number;
};
